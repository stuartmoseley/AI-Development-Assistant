{
    "app.py": "# This is a Flask application\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\n\nif __name__ == '__main__':\n    app.run()",
    "index.js": "// This is an Express application\nconst express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n    res.send('Hello, World!');\n});\n\napp.listen(3000, () => {\n    console.log('Server is running on port 3000');\n});",
    "package.json": "{\n  \"name\": \"express-app\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"express\": \"^4.17.1\"\n  }\n}",
    "main.py": "# This is a FastAPI application\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get('/')\ndef read_root():\n    return {\"Hello\": \"World\"}",
    "Dockerfile": "FROM python:3.8-slim\nWORKDIR /app\nCOPY . /app\nRUN pip install -r requirements.txt\nCMD [\"python\", \"app.py\"]",
    "README.md": "# Project Title\n\nThis is a project generated by the AI Development Assistant.\n",
    "config.py": "# Configuration file\n\nclass Config:\n    DEBUG = True\n",
    "angular.json": "{\n  \"version\": 1,\n  \"projects\": {}\n}",
    "manage.py": "# This is a Django management script\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'app.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)",
    "settings.py": "# Django settings for app project.\n\nimport os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'app.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'app.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'",
    "index.html": "<!DOCTYPE html>\n<html>\n<head>\n    <title>React App</title>\n</head>\n<body>\n    <div id=\"root\"></div>\n    <script src=\"bundle.js\"></script>\n</body>\n</html>",
    "styles.css": "body {\n    font-family: Arial, sans-serif;\n}",
    "scripts.js": "console.log('Hello, World!');",
    "artisan": "#!/usr/bin/env php\n<?php\n\nuse Illuminate\Contracts\Console\Kernel;\n\nrequire __DIR__.'/vendor/autoload.php';\n\n$app = require_once __DIR__.'/bootstrap/app.php';\n\n$kernel = $app->make(Kernel::class);\n\n$status = $kernel->handle(\n    $input = new Symfony\Component\Console\Input\ArgvInput,\n    new Symfony\Component\Console\Output\ConsoleOutput\n);\n\n$kernel->terminate($input, $status);\n\nexit($status);\n",
    "composer.json": "{\n    \"name\": \"laravel/laravel\",\n    \"type\": \"project\",\n    \"description\": \"The Laravel Framework.\",\n    \"keywords\": [\"framework\", \"laravel\"],\n    \"license\": \"MIT\",\n    \"require\": {\n        \"php\": \"^7.3|^8.0\",\n        \"fideloper/proxy\": \"^4.4\",\n        \"fruitcake/laravel-cors\": \"^2.0\",\n        \"guzzlehttp/guzzle\": \"^7.0.1\",\n        \"laravel/framework\": \"^8.12\",\n        \"laravel/tinker\": \"^2.5\"\n    },\n    \"require-dev\": {\n        \"facade/ignition\": \"^2.5\",\n        \"fakerphp/faker\": \"^1.9.1\",\n        \"mockery/mockery\": \"^1.4.2\",\n        \"nunomaduro/collision\": \"^5.0\",\n        \"phpunit/phpunit\": \"^9.3.3\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"App\\\\\": \"app/\"\n        },\n        \"classmap\": [\n            \"database/seeds\",\n            \"database/factories\"\n        ],\n        \"files\": [\n            \"app/Helpers/helpers.php\"\n        ]\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Tests\\\\\": \"tests/\"\n        }\n    },\n    \"extra\": {\n        \"laravel\": {\n            \"dont-discover\": []\n        }\n    },\n    \"scripts\": {\n        \"post-autoload-dump\": [\n            \"Illuminate\\\\Foundation\\\\ComposerScripts::postAutoloadDump\",\n            \"@php artisan package:discover --ansi\"\n        ],\n        \"post-root-package-install\": [\n            \"@php -r \\\"file_exists('.env') || copy('.env.example', '.env');\\\"\"\n        ],\n        \"post-create-project-cmd\": [\n            \"@php artisan key:generate --ansi\"\n        ]\n    },\n    \"config\": {\n        \"optimize-autoloader\": true,\n        \"preferred-install\": \"dist\",\n        \"sort-packages\": true\n    },\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true\n}\n",
    "src/main/java/": "// Java source files\n",
    "src/main/resources/": "// Resource files\n",
    "e2e/": "// End-to-end test files\n",
    "angular.json": "{\n  \"version\": 1,\n  \"projects\": {}\n}",
    "Gemfile": "source 'https://rubygems.org'\ngem 'rails', '~> 6.1.4'\n",
    "Controllers/": "// ASP.NET Controllers\n",
    "Views/": "// ASP.NET Views\n",
    "Models/": "// ASP.NET Models\n",
    "appsettings.json": "{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft\": \"Warning\",\n      \"Microsoft.Hosting.Lifetime\": \"Information\"\n    }\n  },\n  \"AllowedHosts\": \"*\"\n}",
    "Program.cs": "using System;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace MyAspNetApp\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
    "src/": "// Source files\n",
    "public/": "// Public files\n",
    "config/": "// Configuration files\n",
    "var/": "// Variable files\n",
    "vendor/": "// Vendor files\n",
    "application/": "// CodeIgniter application files\n",
    "system/": "// CodeIgniter system files\n",
    "user_guide/": "// CodeIgniter user guide files\n",
    "index.php": "<?php\n\nrequire 'vendor/autoload.php';\n\n$app = require_once __DIR__.'/bootstrap/app.php';\n\n$app->run();\n",
    "pages/": "// Next.js pages\n",
    "styles/": "// Next.js styles\n",
    "nuxt.config.js": "export default {\n  // Nuxt.js configuration\n}\n",
    "resources/": "// Resources\n",
    "routes/": "// Routes\n",
    "storage/": "// Storage\n",
    "client/": "// Meteor client files\n",
    "server/": "// Meteor server files\n",
    "private/": "// Meteor private files\n",
    "tests/": "// Meteor test files\n",
    "mix.exs": "defmodule MyApp.MixProject do\n  use Mix.Project\n\n  def project do\n    [\n      app: :my_app,\n      version: \"0.1.0\",\n      elixir: \"~> 1.10\",\n      start_permanent: Mix.env() == :prod,\n      deps: deps()\n    ]\n  end\n\n  def application do\n    [\n      extra_applications: [:logger]\n    ]\n  end\n\n  defp deps do\n    [\n      {:phoenix, \"~> 1.5.7\"},\n      {:phoenix_pubsub, \"~> 2.0\"},\n      {:phoenix_ecto, \"~> 4.1\"},\n      {:ecto_sql, \"~> 3.4\"},\n      {:postgrex, \">= 0.0.0\"},\n      {:phoenix_html, \"~> 2.11\"},\n      {:phoenix_live_reload, \"~> 1.2\", only: :dev},\n      {:gettext, \"~> 0.11\"},\n      {:jason, \"~> 1.0\"},\n      {:plug_cowboy, \"~> 2.0\"}\n    ]\n  end\nend\n",
    "Cargo.toml": "[package]\nname = \"my_rust_project\"\nversion = \"0.1.0\"\nauthors = [\"Your Name <you@example.com>\"]\nedition = \"2018\"\n\n[dependencies]\n",
    "go.mod": "module my_go_project\n\ngo 1.16\n",
    "lib/": "// Elixir library files\n",
    "config/": "// Elixir configuration files\n",
    "build.gradle.kts": "plugins {\n    kotlin(\"jvm\") version \"1.5.10\"\n}\n\ngroup = \"com.example\"\nversion = \"1.0-SNAPSHOT\"\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation(kotlin(\"stdlib\"))\n}\n",
    "Sources/": "// Swift source files\n",
    "Package.swift": "// swift-tools-version:5.3\nimport PackageDescription\n\nlet package = Package(\n    name: \"MySwiftProject\",\n    dependencies: [\n        // Dependencies declare other packages that this package depends on.\n        // .package(url: /* package url */, from: \"1.0.0\"),\n    ],\n    targets: [\n        // Targets are the basic building blocks of a package. A target can define a module or a test suite.\n        // Targets can depend on other targets in this package, and on products in packages which this package depends on.\n        .target(\n            name: \"MySwiftProject\",\n            dependencies: []),\n        .testTarget(\n            name: \"MySwiftProjectTests\",\n            dependencies: [\"MySwiftProject\"]),\n    ]\n)\n",
    "R/": "// R source files\n",
    "man/": "// R manual files\n",
    "DESCRIPTION": "Package: my_r_package\nType: Package\nTitle: What the Package Does (One Line, Title Case)\nVersion: 0.1.0\nAuthor: Your Name\nMaintainer: Your Name <you@example.com>\nDescription: More about what it does (maybe more than one line).\nLicense: What license it uses\n",
    "t/": "// Perl test files\n",
    "Makefile.PL": "use ExtUtils::MakeMaker;\n\nWriteMakefile(\n    NAME         => 'MyPerlModule',\n    VERSION_FROM => 'lib/MyPerlModule.pm',\n    PREREQ_PM    => {},\n    ($] >= 5.005 ?    ## Add these new keywords supported since 5.005\n      (ABSTRACT_FROM => 'lib/MyPerlModule.pm', # retrieve abstract from module\n       AUTHOR        => 'Your Name <you@example.com>') : ()),\n);\n",
    "main.lua": "-- Lua main script\nprint(\"Hello, World!\")\n",
    "app/": "// Haskell application files\n",
    "test/": "// Haskell test files\n",
    "package.yaml": "name: my-haskell-project\nversion: 0.1.0.0\nsynopsis: A short description of the project\ncategory: Web\nbuild-type: Simple\ncabal-version: >=1.10\n\nlibrary\n  exposed-modules:     MyHaskellProject\n  hs-source-dirs:      src\n  build-depends:       base >=4.7 && <5\n  default-language:    Haskell2010\n\ntest-suite my-haskell-project-test\n  type:                exitcode-stdio-1.0\n  hs-source-dirs:      test\n  main-is:             Main.hs\n  build-depends:       base\n  default-language:    Haskell2010\n",
    "project.clj": "(defproject my-clojure-project \"0.1.0-SNAPSHOT\"\n  :description \"FIXME: write description\"\n  :url \"http://example.com/FIXME\"\n  :license {:name \"Eclipse Public License\"\n            :url \"http://www.eclipse.org/legal/epl-v10.html\"}\n  :dependencies [[org.clojure/clojure \"1.10.1\"]])\n",
    "build.sbt": "name := \"my-scala-project\"\n\nversion := \"0.1\"\n\nscalaVersion := \"2.13.5\"\n\nlibraryDependencies += \"org.scalatest\" %% \"scalatest\" % \"3.2.3\" % Test\n",
    "src/main/groovy/": "// Groovy source files\n",
    "paket.dependencies": "source https://nuget.org/api/v2\nframework: net45\nnuget FSharp.Core\n",
    "dune": "(executable\n (name my_ocaml_project)\n (libraries core))\n",
    "dune-project": "(lang dune 2.0)\n(name my_ocaml_project)\n",
    "include/": "// Erlang include files\n",
    "rebar.config": "{erl_opts, [debug_info]}.\n{deps, []}.\n",
    "My Project/": "// VB.NET project files\n",
    "Module1.vb": "Module Module1\n\n    Sub Main()\n        Console.Write{
    "app.py": "# This is a Flask application\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\n\nif __name__ == '__main__':\n    app.run()",
    "requirements.txt": "flask",
    "index.js": "// This is an Express application\nconst express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n    res.send('Hello, World!');\n});\n\napp.listen(3000, () => {\n    console.log('Server is running on port 3000');\n});",
    "package.json": "{\n  \"name\": \"express-app\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"express\": \"^4.17.1\"\n  }\n}",
    "main.py": "# This is a FastAPI application\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get('/')\ndef read_root():\n    return {\"Hello\": \"World\"}",
    "Dockerfile": "FROM python:3.8-slim\nWORKDIR /app\nCOPY . /app\nRUN pip install -r requirements.txt\nCMD [\"python\", \"app.py\"]",
    "README.md": "# Project Title\n\nThis is a project generated by the AI Development Assistant.\n",
    "config.py": "# Configuration file\n\nclass Config:\n    DEBUG = True\n",
    "angular.json": "{\n  \"version\": 1,\n  \"projects\": {}\n}",
    "pom.xml": "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://www.w3.org/2001/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>com.example</groupId>\n  <artifactId>spring-boot-app</artifactId>\n  <version>0.0.1-SNAPSHOT</version>\n  <dependencies>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n  </dependencies>\n</project>",
    "manage.py": "# This is a Django management script\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'app.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)",
    "settings.py": "# Django settings for app project.\n\nimport os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY =your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'app.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'app.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'",
    "index.html": "<!DOCTYPE html>\n<html>\n<head>\n    <title>React App</title>\n</head>\n<body>\n    <div id=\"root\"></div>\n    <script src=\"bundle.js\"></script>\n</body>\n</html>",
    "styles.css": "body {\n    font-family: Arial, sans-serif;\n}",
    "scripts.js": "console.log('Hello, World!');",
    "artisan": "#!/usr/bin/env php\n<?php\n\nuse Illuminate\Contracts\Console\Kernel;\n\nrequire __DIR__.'/vendor/autoload.php';\n\n$app = require_once __DIR__.'/bootstrap/app.php';\n\n$kernel = $app->make(Kernel::class);\n\n$status = $kernel->handle(\n    $input = new Symfony\Component\Console\Input\ArgvInput,\n    new Symfony\Component\Console\Output\ConsoleOutput\n);\n\n$kernel->terminate($input, $status);\n\nexit($status);\n",
    "composer.json": "{\n    \"name\": \"laravel/laravel\",\n    \"type\": \"project\",\n    \"description\": \"The Laravel Framework.\",\n    \"keywords\": [\"framework\", \"laravel\"],\n    \"license\": \"MIT\",\n    \"require\": {\n        \"php\": \"^7.3|^8.0\",\n        \"fideloper/proxy\": \"^4.4\",\n        \"fruitcake/laravel-cors\": \"^2.0\",\n        \"guzzlehttp/guzzle\": \"^7.0.1\",\n        \"laravel/framework\": \"^8.12\",\n        \"laravel/tinker\": \"^2.5\"\n    },\n    \"require-dev\": {\n        \"facade/ignition\": \"^2.5\",\n        \"fakerphp/faker\": \"^1.9.1\",\n        \"mockery/mockery\": \"^1.4.2\",\n        \"nunomaduro/collision\": \"^5.0\",\n        \"phpunit/phpunit\": \"^9.3.3\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"App\\\\\": \"app/\"\n        },\n        \"classmap\": [\n            \"database/seeds\",\n            \"database/factories\"\n        ],\n        \"files\": [\n            \"app/Helpers/helpers.php\"\n        ]\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Tests\\\\\": \"tests/\"\n        }\n    },\n    \"extra\": {\n        \"laravel\": {\n            \"dont-discover\": []\n        }\n    },\n    \"scripts\": {\n        \"post-autoload-dump\": [\n            \"Illuminate\\\\Foundation\\\\ComposerScripts::postAutoloadDump\",\n            \"@php artisan package:discover --ansi\"\n        ],\n        \"post-root-package-install\": [\n            \"@php -r \\\"file_exists('.env') || copy('.env.example', '.env');\\\"\"\n        ],\n        \"post-create-project-cmd\": [\n            \"@php artisan key:generate --ansi\"\n        ]\n    },\n    \"config\": {\n        \"optimize-autoloader\": true,\n        \"preferred-install\": \"dist\",\n        \"sort-packages\": true\n    },\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true\n}\n",
    "src/main/java/": "// Java source files\n",
    "src/main/resources/": "// Resource files\n",
    "e2e/": "// End-to-end test files\n",
    "angular.json": "{\n  \"version\": 1,\n  \"projects\": {}\n}",
    "Gemfile": "source 'https://rubygems.org'\ngem 'rails', '~> 6.1.4'\n",
    "Controllers/": "// ASP.NET Controllers\n",
    "Views/": "// ASP.NET Views\n",
    "Models/": "// ASP.NET Models\n",
    "appsettings.json": "{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft\": \"Warning\",\n      \"Microsoft.Hosting.Lifetime\": \"Information\"\n    }\n  },\n  \"AllowedHosts\": \"*\"\n}",
    "Program.cs": "using System;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace MyAspNetApp\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
    "src/": "// Source files\n",
    "public/": "// Public files\n",
    "config/": "// Configuration files\n",
    "var/": "// Variable files\n",
    "vendor/": "// Vendor files\n",
    "application/": "// CodeIgniter application files\n",
    "system/": "// CodeIgniter system files\n",
    "user_guide/": "// CodeIgniter user guide files\n",
    "index.php": "<?php\n\nrequire 'vendor/autoload.php';\n\n$app = require_once __DIR__.'/bootstrap/app.php';\n\n$app->run();\n",
    "pages/": "// Next.js pages\n",
    "styles/": "// Next.js styles\n",
    "nuxt.config.js": "export default {\n  // Nuxt.js configuration\n}\n",
    "resources/": "// Resources\n",
    "routes/": "// Routes\n",
    "storage/": "// Storage\n",
    "client/": "// Meteor client files\n",
    "server/": "// Meteor server files\n",
    "private/": "// Meteor private files\n",
    "tests/": "// Meteor test files\n",
    "mix.exs": "defmodule MyApp.MixProject do\n  use Mix.Project\n\n  def project do\n    [\n      app: :my_app,\n      version: \"0.1.0\",\n      elixir: \"~> 1.10\",\n      start_permanent: Mix.env() == :prod,\n      deps: deps()\n    ]\n  end\n\n  def application do\n    [\n      extra_applications: [:logger]\n    ]\n  end\n\n  defp deps do\n    [\n      {:phoenix, \"~> 1.5.7\"},\n      {:phoenix_pubsub, \"~> 2.0\"},\n      {:phoenix_ecto, \"~> 4.1\"},\n      {:ecto_sql, \"~> 3.4\"},\n      {:postgrex, \">= 0.0.0\"},\n      {:phoenix_html, \"~> 2.11\"},\n      {:phoenix_live_reload, \"~> 1.2\", only: :dev},\n      {:gettext, \"~> 0.11\"},\n      {:jason, \"~> 1.0\"},\n      {:plug_cowboy, \"~> 2.0\"}\n    ]\n  end\nend\n",
    "Cargo.toml": "[package]\nname = \"my_rust_project\"\nversion = \"0.1.0\"\nauthors = [\"Your Name <you@example.com>\"]\nedition = \"2018\"\n\n[dependencies]\n",
    "go.mod": "module my_go_project\n\ngo 1.16\n",
    "lib/": "// Elixir library files\n",
    "config/": "// Elixir configuration files\n",
    "build.gradle.kts": "plugins {\n    kotlin(\"jvm\") version \"1.5.10\"\n}\n\ngroup = \"com.example\"\nversion = \"1.0-SNAPSHOT\"\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation(kotlin(\"stdlib\"))\n}\n",
    "Sources/": "// Swift source files\n",
    "Package.swift": "// swift-tools-version:5.3\nimport PackageDescription\n\nlet package = Package(\n    name: \"MySwiftProject\",\n    dependencies: [\n        // Dependencies declare other packages that this package depends on.\n        // .package(url: /* package url */, from: \"1.0.0\"),\n    ],\n    targets: [\n        // Targets are the basic building blocks of a package. A target can define a module or a test suite.\n        // Targets can depend on other targets in this package, and on products in packages which this package depends on.\n        .target(\n            name: \"MySwiftProject\",\n            dependencies: []),\n        .testTarget(\n            name: \"MySwiftProjectTests\",\n            dependencies: [\"MySwiftProject\"]),\n    ]\n)\n",
    "R/": "// R source files\n",
    "man/": "// R manual files\n",
    "DESCRIPTION": "Package: my_r_package\nType: Package\nTitle: What the Package Does (One Line, Title Case)\nVersion: 0.1.0\nAuthor: Your Name\nMaintainer: Your Name <you@example.com>\nDescription: More about what it does (maybe more than one line).\nLicense: What license it uses\n",
    "t/": "// Perl test files\n",
    "Makefile.PL": "use ExtUtils::MakeMaker;\n\nWriteMakefile(\n    NAME         => 'MyPerlModule',\n    VERSION_FROM => 'lib/MyPerlModule.pm',\n    PREREQ_PM    => {},\n    ($] >= 5.005 ?    ## Add these new keywords supported since 5.005\n      (ABSTRACT_FROM => 'lib/MyPerlModule.pm', # retrieve abstract from module\n       AUTHOR        => 'Your Name <you@example.com>') : ()),\n);\n",
    "main.lua": "-- Lua main script\nprint(\"Hello, World!\")\n",
    "app/": "// Haskell application files\n",
    "test/": "// Haskell test files\n",
    "package.yaml": "name: my-haskell-project\nversion: 0.1.0.0\nsynopsis: A short description of the project\ncategory: Web\nbuild-type: Simple\ncabal-version: >=1.10\n\nlibrary\n  exposed-modules:     MyHaskellProject\n  hs-source-dirs:      src\n  build-depends:       base >=4.7 && <5\n  default-language:    Haskell2010\n\ntest-suite my-haskell-project-test\n  type:                exitcode-stdio-1.0\n  hs-source-dirs:      test\n  main-is:             Main.hs\n  build-depends:       base\n  default-language:    Haskell2010\n",
    "project.clj": "(defproject my-clojure-project \"0.1.0-SNAPSHOT\"\n  :description \"FIXME: write description\"\n  :url \"http://example.com/FIXME\"\n  :license {:name \"Eclipse Public License\"\n            :url \"http://www.eclipse.org/legal/epl-v10.html\"}\n  :dependencies [[org.clojure/clojure \"1.10.1\"]])\n",
    "build.sbt": "name := \"my-scala-project\"\n\nversion := \"0.1\"\n\nscalaVersion := \"2.13.5\"\n\nlibraryDependencies += \"org.scalatest\" %% \"scalatest\" % \"3.2.3\" % Test\n",
    "src/main/groovy/": "// Groovy source files\n",
    "paket.dependencies": "source https://nuget.org/api/v2\nframework: net45\nnuget FSharp.Core\n",
    "dune": "(executable\n (name my_ocaml_project)\n (libraries core))\n",
    "dune-project": "(lang dune 2.0)\n(name my_ocaml_project)\n",
    "include/": "// Erlang include files\n",
    "rebar.config": "{erl_opts, [debug_info]}.\n{deps, []}.\n",
    "Module1.vb": "Module Module1\n\n    Sub Main()\n        Console.WriteLine(\"Hello, World!\")\n    End Sub\n\nEnd Module",
    "lib/": "// Ruby library files\n",
    "bin/": "// Ruby binary files\n",
    "Gemfile": "source 'https://rubygems.org'\ngem 'rails', '~> 6.1.4'\n",
    "src/": "// PHP source files\n",
    "public/": "// PHP public files\n",
    "composer.json": "{\n  \"name\": \"my-php-project\",\n  \"require\": {}\n}",
    "tests/": "// Python test files\n",
    "requirements.txt": "flask\n",
    "src/main/java/": "// Java source files\n",
    "src/main/resources/": "// Java resource files\n",
    "pom.xml": "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://www.w3.org/2001/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>com.example</groupId>\n  <artifactId>spring-boot-app</artifactId>\n  <version>0.0.1-SNAPSHOT</version>\n  <dependencies>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n  </dependencies>\n</project>",
    "project.json": "{\n  \"version\": \"1.0.0\",\n  \"dependencies\": {}\n}",
    "src/": "// C++ source files\n",
    "include/": "// C++ header files\n",
    "CMakeLists.txt": "cmake_minimum_required(VERSION 3.10)\nproject(MyCppProject)\nset(CMAKE_CXX_STANDARD 17)\nadd_executable(MyCppProject src/main.cpp)\n",
    "src/": "// C source files\n",
    "include/": "// C header files\n",
    "Makefile": "CC=gcc\nCFLAGS=-I.\nDEPS = \nOBJ = main.o \n\n%.o: %.c $(DEPS)\n\t$(CC) -c -o $@ $< $(CFLAGS)\n\nmain: $(OBJ)\n\t$(CC) -o $@ $^ $(CFLAGS)\n",
    "tsconfig.json": "{\n  \"compilerOptions\": {\n    \"target\": \"es6\",\n    \"module\": \"commonjs\",\n    \"outDir\": \"./dist\",\n    \"rootDir\": \"./src\",\n    \"strict\": true\n  }\n}",
    "package.json": "{\n  \"name\": \"my-typescript-project\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"build\": \"tsc\"\n  },\n  \"devDependencies\": {\n    \"typescript\": \"^4.0.0\"\n  }\n}",
    "src/": "// JavaScript source files\n",
    "package.json": "{\n  \"name\": \"my-javascript-project\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"node index.js\"\n  },\n  \"dependencies\": {}\n}",
    "index.html": "<!DOCTYPE html>\n<html>\n<head>\n    <title>My HTML Project</title>\n</head>\n<body>\n    <h1>Hello, World!</h1>\n</body>\n</html>",
    "styles.css": "body {\n    font-family: Arial, sans-serif;\n}",
    "styles.scss": "body {\n    font-family: Arial, sans-serif;\n}",
    "styles.less": "body {\n    font-family: Arial, sans-serif;\n}",
    "styles.styl": "body\n  font-family Arial, sans-serif\n",
    "README.md": "# Project Title\n\nThis is a project generated by the AI Development Assistant.\n",
    "config.yaml": "# YAML configuration\n",
    "config.json": "{\n  \"key\": \"value\"\n}",
    "config.xml": "<config>\n  <key>value</key>\n</config>",
    "config.toml": "key = \"value\"\n",
    "config.ini": "[section]\nkey = value\n",
    "script.sh": "#!/bin/bash\necho \"Hello, World!\"\n",
    "script.ps1": "Write-Host \"Hello, World!\"\n",
    "script.bat": "@echo off\necho Hello, World!\n",
    "Makefile": "all:\n\techo \"Hello, World!\"\n",
    "Dockerfile": "FROM python:3.8-slim\nWORKDIR /app\nCOPY . /app\nRUN pip install -r requirements.txt\nCMD [\"python\", \"app.py\"]",
    "Vagrantfile": "Vagrant.configure(\"2\") do |config|\n  config.vm.box = \"ubuntu/bionic64\"\nend\n",
    "playbook.yml": "---\n- hosts: all\n  tasks:\n    - name: Ensure Apache is installed\n      apt:\n        name: apache2\n        state: present\n",
    "main.tf": "provider \"aws\" {\n  region = \"us-west-2\"\n}\n",
    "deployment.yaml": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-deployment\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: my-app\n  template:\n    metadata:\n      labels:\n        app: my-app\n    spec:\n      containers:\n      - name: my-container\n        image: my-image\n        ports:\n        - containerPort: 80\n",
    "service.yaml": "apiVersion: v1\nkind: Service\nmetadata:\n  name: my-service\nspec:\n  selector:\n    app: my-app\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 80\n",
    "Chart.yaml": "apiVersion: v2\nname: my-chart\nversion: 0.1.0\n",
    "values.yaml": "replicaCount: 1\n",
    "manifests/": "// Puppet manifests\n",
    "modules/": "// Puppet modules\n",
    "recipes/": "// Chef recipes\n",
    "attributes/": "// Chef attributes\n",
    "salt/": "// SaltStack state files\n",
    "pillar/": "// SaltStack pillar files\n",
    "inputs/": "// CFEngine inputs\n",
    "outputs/": "// CFEngine outputs\n",
    "Jenkinsfile": "pipeline {\n    agent any\n    stages {\n        stage('Build') {\n            steps {\n                echo 'Building...'\n            }\n        }\n        stage('Test') {\n            steps {\n                echo 'Testing...'\n            }\n        }\n        stage('Deploy') {\n            steps {\n                echo 'Deploying...'\n            }\n        }\n    }\n}\n",
    ".circleci/config.yml": "version: 2.1\njobs:\n  build:\n    docker:\n      - image: circleci/python:3.8\n    steps:\n      - checkout\n      - run: echo \"Building...\"\n",
    ".travis.yml": "language: python\npython:\n  - \"3.8\"\nscript:\n  - echo \"Building...\"\n",
    ".gitlab-ci.yml": "stages:\n  - build\n  - test\n  - deploy\nbuild:\n  stage: build\n  script:\n    - echo \"Building...\"\ntest:\n  stage: test\n  script:\n    - echo \"Testing...\"\ndeploy:\n  stage: deploy\n  script:\n    - echo \"Deploying...\"\n",
    ".github/workflows/ci.yml": "name: CI\non: [push]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Build\n        run: echo \"Building...\"\n",
    "bitbucket-pipelines.yml": "pipelines:\n  default:\n    - step:\n        name: Build\n        script:\n          - echo \"Building...\"\n",
    "teamcity-settings.xml": "<project>\n  <build>\n    <steps>\n      <step>\n        <name>Build</name>\n        <script>echo \"Building...\"</script>\n      </step>\n    </steps>\n  </build>\n</project>",
    "bamboo-specs/": "// Bamboo specs\n",
    "azure-pipelines.yml": "trigger:\n- main\npool:\n  vmImage: 'ubuntu-latest'\nsteps:\n- script: echo \"Building...\"\n",
    "buildspec.yml": "version: 0.2\nphases:\n  build:\n    commands:\n      - echo \"Building...\"\n",
    "cloudbuild.yaml": "steps:\n- name: 'gcr.io/cloud-builders/docker'\n  args: ['build', '-t', 'gcr.io/$PROJECT_ID/my-image', '.']\n",
    "Procfile": "web: python app.py\n",
    "netlify.toml": "[build]\n  publish = \"public\"\n  command = \"echo 'Building...'\n",
    "vercel.json": "{\n  \"builds\": [\n    { \"src\": \"index.js\", \"use\": \"@vercel/node\" }\n  ]\n}",
    "firebase.json": "{\n  \"hosting\": {\n    \"public\": \"public\",\n    \"ignore\": [\n      \"firebase.json\",\n      \"**/.*\",\n      \"**/node_modules/**\"\n    ]\n  }\n}",
    "amplify.yml": "version: 1\nfrontend:\n  phases:\n    build:\n      commands:\n        - echo \"Building...\"\n",
    "serverless.yml": "service: my-service\nprovider:\n  name: aws\n  runtime: nodejs12.x\nfunctions:\n  hello:\n    handler: handler.hello\n",
    "stack.yml": "version: 1.0\nprovider:\n  name: openfaas\nfunctions:\n  hello:\n    image: functions/alpine:latest\n    handler: ./handler\n",
    "function.yaml": "apiVersion: kubeless.io/v1beta1\nkind: Function\nmetadata:\n  name: hello\nspec:\n  runtime: python3.8\n  handler: handler.hello\n  deps: requirements.txt\n",
    "service.yaml": "apiVersion: serving.knative.dev/v1\nkind: Service\nmetadata:\n  name: hello\nspec:\n  template:\n    spec:\n      containers:\n        - image: gcr.io/knative-samples/helloworld-go\n          env:\n            - name: TARGET\n              value: \"Go Sample v1\"\n",
    "workflow.yaml": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: hello-world-\nspec:\n  entrypoint: whalesay\n  templates:\n    - name: whalesay\n      container:\n        image: docker/whalesay:latest\n        command: [cowsay]\n        args: [\"hello world\"]\n",
    "pipeline.json": "{\n  \"schema\": \"v1\",\n  \"id\": \"my-pipeline\",\n  \"stages\": [\n    {\n      \"id\": \"build\",\n      \"type\": \"jenkins\",\n      \"master\": \"jenkins-master\",\n      \"job\": \"build-job\"\n    }\n  ]\n}",
    "pipeline.yaml": "apiVersion: tekton.dev/v1beta1\nkind: Pipeline\nmetadata:\n  name: hello-world-pipeline\nspec:\n  tasks:\n    - name: hello-world\n      taskRef:\n        name: hello-world-task\n",
    "flux.yaml": "apiVersion: flux.weave.works/v1beta1\nkind: HelmRelease\nmetadata:\n  name: my-release\nspec:\n  releaseName: my-release\n  chart:\n    repository: https://charts.bitnami.com/bitnami\n    name: nginx\n    version: 8.9.1\n",
    "istio.yaml": "apiVersion: install.istio.io/v1alpha1\nkind: IstioOperator\nmetadata:\n  name: example-istiocontrolplane\nspec:\n  profile: demo\n",
    "linkerd.yaml": "apiVersion: linkerd.io/v1alpha1\nkind: Linkerd\nmetadata:\n  name: linkerd\nspec:\n  version: stable-2.10.2\n",
    "consul.hcl": "datacenter = \"dc1\"\ndata_dir = \"/opt/consul\"\nlog_level = \"INFO\"\n",
    "vault.hcl": "storage \"file\" {\n  path = \"/vault/data\"\n}\nlistener \"tcp\" {\n  address = \"127.0.0.1:8200\"\n  tls_disable = 1\n}\n",
    "nomad.hcl": "data_dir = \"/opt/nomad\"\nlog_level = \"INFO\"\n",
    "traefik.toml": "[entryPoints]\n  [entryPoints.http]\n    address = \":80\"\n",
    "nginx.conf": "server {\n    listen 80;\n    server_name example.com;\n    location / {\n        proxy_pass http://localhost:3000;\n    }\n}\n",
    "httpd.conf": "ServerName localhost\nListen 80\nDocumentRoot \"/var/www/html\"\n",
    "haproxy.cfg": "global\n    log /dev/log local0\n    log /dev/log local1 notice\n    chroot /var/lib/haproxy\n    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners\n    stats timeout 30s\n    user haproxy\n    group haproxy\n    daemon\n    ca-base /etc/ssl/certs\n    crt-base /etc/ssl/private\n    ssl-default-bind-ciphers PROFILE=SYSTEM\n    ssl-default-server-ciphers PROFILE=SYSTEM\n\ndefaults\n    log     global\n    mode    http\n    option  httplog\n    option  dontlognull\n    timeout connect 5000ms\n    timeout client  50000ms\n    timeout server  50000ms\n    errorfile 400 /etc/haproxy/errors/400.http\n    errorfile 403 /etc/haproxy/errors/403.http\n    errorfile 408 /etc/haproxy/errors/408.http\n    errorfile 500 /etc/haproxy/errors/500.http\n    errorfile 502 /etc/haproxy/errors/502.http\n    errorfile 503 /etc/haproxy/errors/503.http\n    errorfile 504 /etc/haproxy/errors/504.http\n",
    "default.vcl": "vcl 4.0;\nbackend default {\n    .host = \"127.0.0.1\";\n    .port = \"8080\";\n}\n",
    "squid.conf": "http_port 3128\nacl localnet src 10.0.0.0/8\nhttp_access allow localnet\n",
    "Caddyfile": "localhost\nroot * /usr/share/caddy\nfile_server\n",
    "lighttpd.conf": "server.modules = (\n    \"mod_access\",\n    \"mod_alias\",\n    \"mod_compress\",\n    \"mod_redirect\",\n    \"mod_rewrite\"\n)\nserver.document-root = \"/var/www/html\"\nserver.port = 80\n",
    "server.xml": "<Server port=\"8005\" shutdown=\"SHUTDOWN\">\n  <Service name=\"Catalina\">\n    <Connector port=\"8080\" protocol=\"HTTP/1.1\"\n               connectionTimeout=\"20000\"\n               redirectPort=\"8443\" />\n    <Engine name=\"Catalina\" defaultHost=\"localhost\">\n      <Host name=\"localhost\"  appBase=\"webapps\"\n            unpackWARs=\"true\" autoDeploy=\"true\">\n      </Host>\n    </Engine>\n  </Service>\n</Server>",
    "jetty.xml": "<Configure id=\"Server\" class=\"org.eclipse.jetty.server.Server\">\n  <Call name=\"addConnector\">\n    <Arg>\n      <New class=\"org.eclipse.jetty.server.ServerConnector\">\n        <Arg name=\"server\"><Ref id=\"Server\"/></Arg>\n        <Set name=\"port\">8080</Set>\n      </New>\n    </Arg>\n  </Call>\n</Configure>",
    "domain.xml": "<domain xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/domain_1_0.xsd\" version=\"1.0\">\n  <applications>\n    <application>\n      <web>\n        <context-root>/</context-root>\n        <web-uri>myapp.war</web-uri>\n      </web>\n    </application>\n  </applications>\n</domain>",
    "standalone.xml": "<server xmlns=\"urn:jboss:domain:1.7\">\n  <extensions>\n    <extension module=\"org.jboss.as.clustering.infinispan\"/>\n    <extension module=\"org.jboss.as.connector\"/>\n    <extension module=\"org.jboss.as.deployment-scanner\"/>\n    <extension module=\"org.jboss.as.ee\"/>\n    <extension module=\"org.jboss.as.ejb3\"/>\n    <extension module=\"org.jboss.as.j    "Module1.vb": "Module Module1\n\n    Sub Main()\n        Console.WriteLine(\"Hello, World!\")\n    End Sub\n\nEnd Module",
    "lib/": "// Ruby library files\n",
    "bin/": "// Ruby binary files\n",
    "Gemfile": "source 'https://rubygems.org'\ngem 'rails', '~> 6.1.4'\n",
    "src/": "// PHP source files\n",
    "public/": "// PHP public files\n",
    "composer.json": "{\n  \"name\": \"my-php-project\",\n  \"require\": {}\n}",
    "tests/": "// Python test files\n",
    "requirements.txt": "flask\n",
    "src/main/java/": "// Java source files\n",
    "src/main/resources/": "// Java resource files\n",
    "pom.xml": "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://www.w3.org/2001/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>com.example</groupId>\n  <artifactId>spring-boot-app</artifactId>\n  <version>0.0.1-SNAPSHOT</version>\n  <dependencies>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n  </dependencies>\n</project>",
    "project.json": "{\n  \"version\": \"1.0.0\",\n  \"dependencies\": {}\n}",
    "src/": "// C++ source files\n",
    "include/": "// C++ header files\n",
    "CMakeLists.txt": "cmake_minimum_required(VERSION 3.10)\nproject(MyCppProject)\nset(CMAKE_CXX_STANDARD 17)\nadd_executable(MyCppProject src/main.cpp)\n",
    "src/": "// C source files\n",
    "include/": "// C header files\n",
    "Makefile": "CC=gcc\nCFLAGS=-I.\nDEPS = \nOBJ = main.o \n\n%.o: %.c $(DEPS)\n\t$(CC) -c -o $@ $< $(CFLAGS)\n\nmain: $(OBJ)\n\t$(CC) -o $@ $^ $(CFLAGS)\n",
    "tsconfig.json": "{\n  \"compilerOptions\": {\n    \"target\": \"es6\",\n    \"module\": \"commonjs\",\n    \"outDir\": \"./dist\",\n    \"rootDir\": \"./src\",\n    \"strict\": true\n  }\n}",
    "package.json": "{\n  \"name\": \"my-typescript-project\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"build\": \"tsc\"\n  },\n  \"devDependencies\": {\n    \"typescript\": \"^4.0.0\"\n  }\n}",
    "src/": "// JavaScript source files\n",
    "package.json": "{\n  \"name\": \"my-javascript-project\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"node index.js\"\n  },\n  \"dependencies\": {}\n}",
    "index.html": "<!DOCTYPE html>\n<html>\n<head>\n    <title>My HTML Project</title>\n</head>\n<body>\n    <h1>Hello, World!</h1>\n</body>\n</html>",
    "styles.css": "body {\n    font-family: Arial, sans-serif;\n}",
    "styles.scss": "body {\n    font-family: Arial, sans-serif;\n}",
    "styles.less": "body {\n    font-family: Arial, sans-serif;\n}",
    "styles.styl": "body\n  font-family Arial, sans-serif\n",
    "README.md": "# Project Title\n\nThis is a project generated by the AI Development Assistant.\n",
    "config.yaml": "# YAML configuration\n",
    "config.json": "{\n  \"key\": \"value\"\n}",
    "config.xml": "<config>\n  <key>value</key>\n</config>",
    "config.toml": "key = \"value\"\n",
    "config.ini": "[section]\nkey = value\n",
    "script.sh": "#!/bin/bash\necho \"Hello, World!\"\n",
    "script.ps1": "Write-Host \"Hello, World!\"\n",
    "script.bat": "@echo off\necho Hello, World!\n",
    "Makefile": "all:\n\techo \"Hello, World!\"\n",
    "Dockerfile": "FROM python:3.8-slim\nWORKDIR /app\nCOPY . /app\nRUN pip install -r requirements.txt\nCMD [\"python\", \"app.py\"]",
    "Vagrantfile": "Vagrant.configure(\"2\") do |config|\n  config.vm.box = \"ubuntu/bionic64\"\nend\n",
    "playbook.yml": "---\n- hosts: all\n  tasks:\n    - name: Ensure Apache is installed\n      apt:\n        name: apache2\n        state: present\n",
    "main.tf": "provider \"aws\" {\n  region = \"us-west-2\"\n}\n",
    "deployment.yaml": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-deployment\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: my-app\n  template:\n    metadata:\n      labels:\n        app: my-app\n    spec:\n      containers:\n      - name: my-container\n        image: my-image\n        ports:\n        - containerPort: 80\n",
    "service.yaml": "apiVersion:1\nkind: Service\nmetadata:\n  name: my-service\nspec:\n  selector:\n    app: my-app\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 80\n",
    "Chart.yaml": "apiVersion: v2\nname: my-chart\nversion: 0.1.0\n",
    "values.yaml": "replicaCount: 1\n",
    "manifests/": "// Puppet manifests\n",
    "modules/": "// Puppet modules\n",
    "recipes/": "// Chef recipes\n",
    "attributes/": "// Chef attributes\n",
    "salt/": "// SaltStack state files\n",
    "pillar/": "// SaltStack pillar files\n",
    "inputs/": "// CFEngine inputs\n",
    "outputs/": "// CFEngine outputs\n",
    "Jenkinsfile": "pipeline {\n    agent any\n    stages {\n        stage('Build') {\n            steps {\n                echo 'Building...'\n            }\n        }\n        stage('Test') {\n            steps {\n                echo 'Testing...'\n            }\n        }\n        stage('Deploy') {\n            steps {\n                echo 'Deploying...'\n            }\n        }\n    }\n}\n",
    ".circleci/config.yml": "version: 2.1\njobs:\n  build:\n    docker:\n      - image: circleci/python:3.8\n    steps:\n      - checkout\n      - run: echo \"Building...\"\n",
    ".travis.yml": "language: python\npython:\n  - \"3.8\"\nscript:\n  - echo \"Building...\"\n",
    ".gitlab-ci.yml": "stages:\n  - build\n  - test\n  - deploy\nbuild:\n  stage: build\n  script:\n    - echo \"Building...\"\ntest:\n  stage: test\n  script:\n    - echo \"Testing...\"\ndeploy:\n  stage: deploy\n  script:\n    - echo \"Deploying...\"\n",
    ".github/workflows/ci.yml": "name: CI\non: [push]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Build\n        run: echo \"Building...\"\n",
    "bitbucket-pipelines.yml": "pipelines:\n  default:\n    - step:\n        name: Build\n        script:\n          - echo \"Building...\"\n",
    "teamcity-settings.xml": "<project>\n  <build>\n    <steps>\n      <step>\n        <name>Build</name>\n        <script>echo \"Building...\"</script>\n      </step>\n    </steps>\n  </build>\n</project>",
    "bamboo-specs/": "// Bamboo specs\n",
    "azure-pipelines.yml": "trigger:\n- main\npool:\n  vmImage: 'ubuntu-latest'\nsteps:\n- script: echo \"Building...\"\n",
    "buildspec.yml": "version: 0.2\nphases:\n  build:\n    commands:\n      - echo \"Building...\"\n",
    "cloudbuild.yaml": "steps:\n- name: 'gcr.io/cloud-builders/docker'\n  args: ['build', '-t', 'gcr.io/$PROJECT_ID/my-image', '.']\n",
    "Procfile": "web: python app.py\n",
    "netlify.toml": "[build]\n  publish = \"public\"\n  command = \"echo 'Building...'\n",
    "vercel.json": "{\n  \"builds\": [\n    { \"src\": \"index.js\", \"use\": \"@vercel/node\" }\n  ]\n}",
    "firebase.json": "{\n  \"hosting\": {\n    \"public\": \"public\",\n    \"ignore\": [\n      \"firebase.json\",\n      \"**/.*\",\n      \"**/node_modules/**\"\n    ]\n  }\n}",
    "amplify.yml": "version: 1\nfrontend:\n  phases:\n    build:\n      commands:\n        - echo \"Building...\"\n",
    "serverless.yml": "service: my-service\nprovider:\n  name: aws\n  runtime: nodejs12.x\nfunctions:\n  hello:\n    handler: handler.hello\n",
    "stack.yml": "version: 1.0\nprovider:\n  name: openfaas\nfunctions:\n  hello:\n    image: functions/alpine:latest\n    handler: ./handler\n",
    "function.yaml": "apiVersion: kubeless.io/v1beta1\nkind: Function\nmetadata:\n  name: hello\nspec:\n  runtime: python3.8\n  handler: handler.hello\n  deps: requirements.txt\n",
    "service.yaml": "apiVersion: serving.knative.dev/v1\nkind: Service\nmetadata:\n  name: hello\nspec:\n  template:\n    spec:\n      containers:\n        - image: gcr.io/knative-samples/helloworld-go\n          env:\n            - name: TARGET\n              value: \"Go Sample v1\"\n",
    "workflow.yaml": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: hello-world-\nspec:\n  entrypoint: whalesay\n  templates:\n    - name: whalesay\n      container:\n        image: docker/whalesay:latest\n        command: [cowsay]\n        args: [\"hello world\"]\n",
    "pipeline.json": "{\n  \"schema\": \"v1\",\n  \"id\": \"my-pipeline\",\n  \"stages\": [\n    {\n      \"id\": \"build\",\n      \"type\": \"jenkins\",\n      \"master\": \"jenkins-master\",\n      \"job\": \"build-job\"\n    }\n  ]\n}",
    "pipeline.yaml": "apiVersion: tekton.dev/v1beta1\nkind: Pipeline\nmetadata:\n  name: hello-world-pipeline\nspec:\n  tasks:\n    - name: hello-world\n      taskRef:\n        name: hello-world-task\n",
    "flux.yaml": "apiVersion: flux.weave.works/v1beta1\nkind: HelmRelease\nmetadata:\n  name: my-release\nspec:\n  releaseName: my-release\n  chart:\n    repository: https://charts.bitnami.com/bitnami\n    name: nginx\n    version: 8.9.1\n",
    "istio.yaml": "apiVersion: install.istio.io/v1alpha1\nkind: IstioOperator\nmetadata:\n  name: example-istiocontrolplane\nspec:\n  profile: demo\n",
    "linkerd.yaml": "apiVersion: linkerd.io/v1alpha1\nkind: Linkerd\nmetadata:\n  name: linkerd\nspec:\n  version: stable-2.10.2\n",
    "consul.hcl": "datacenter = \"dc1\"\ndata_dir = \"/opt/consul\"\nlog_level = \"INFO\"\n",
    "vault.hcl": "storage \"file\" {\n  path = \"/vault/data\"\n}\nlistener \"tcp\" {\n  address = \"127.0.0.1:8200\"\n  tls_disable = 1\n}\n",
    "nomad.hcl": "data_dir = \"/opt/nomad\"\nlog_level = \"INFO\"\n",
    "traefik.toml": "[entryPoints]\n  [entryPoints.http]\n    address = \":80\"\n",
    "nginx.conf": "server {\n    listen 80;\n    server_name example.com;\n    location / {\n        proxy_pass http://localhost:3000;\n    }\n}\n",
    "httpd.conf": "ServerName localhost\nListen 80\nDocumentRoot \"/var/www/html\"\n",
    "haproxy.cfg": "global\n    log /dev/log local0\n    log /dev/log local1 notice\n    chroot /var/lib/haproxy\n    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners\n    stats timeout 30s\n    user haproxy\n    group haproxy\n    daemon\n    ca-base /etc/ssl/certs\n    crt-base /etc/ssl/private\n    ssl-default-bind-ciphers PROFILE=SYSTEM\n    ssl-default-server-ciphers PROFILE=SYSTEM\n\ndefaults\n    log     global\n    mode    http\n    option  httplog\n    option  dontlognull\n    timeout connect 5000ms\n    timeout client  50000ms\n    timeout server  50000ms\n    errorfile 400 /etc/haproxy/errors/400.http\n    errorfile 403 /etc/haproxy/errors/403.http\n    errorfile 408 /etc/haproxy/errors/408.http\n    errorfile 500 /etc/haproxy/errors/500.http\n    errorfile 502 /etc/haproxy/errors/502.http\n    errorfile 503 /etc/haproxy/errors/503.http\n    errorfile 504 /etc/haproxy/errors/504.http\n",
    "default.vcl": "vcl 4.0;\nbackend default {\n    .host = \"127.0.0.1\";\n    .port = \"8080\";\n}\n",
    "squid.conf": "http_port 3128\nacl localnet src 10.0.0.0/8\nhttp_access allow localnet\n",
    "Caddyfile": "localhost\nroot * /usr/share/caddy\nfile_server\n",
    "lighttpd.conf": "server.modules = (\n    \"mod_access\",\n    \"mod_alias\",\n    \"mod_compress\",\n    \"mod_redirect\",\n    \"mod_rewrite\"\n)\nserver.document-root = \"/var/www/html\"\nserver.port = 80\n",
    "server.xml": "<Server port=\"8005\" shutdown=\"SHUTDOWN\">\n  <Service name=\"Catalina\">\n    <Connector port=\"8080\" protocol=\"HTTP/1.1\"\n               connectionTimeout=\"20000\"\n               redirectPort=\"8443\" />\n    <Engine name=\"Catalina\" defaultHost=\"localhost\">\n      <Host name=\"localhost\"  appBase=\"webapps\"\n            unpackWARs=\"true\" autoDeploy=\"true\">\n      </Host>\n    </Engine>\n  </Service>\n</Server>",
    "jetty.xml": "<Configure id=\"Server\" class=\"org.eclipse.jetty.server.Server\">\n  <Call name=\"addConnector\">\n    <Arg>\n      <New class=\"org.eclipse.jetty.server.ServerConnector\">\n        <Arg name=\"server\"><Ref id=\"Server\"/></Arg>\n        <Set name=\"port\">8080</Set>\n      </New>\n    </Arg>\n  </Call>\n</Configure>",
    "domain.xml": "<domain xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/domain_1_0.xsd\" version=\"1.0\">\n  <applications>\n    <application>\n      <web>\n        <context-root>/</context-root>\n        <web-uri>myapp.war</web-uri>\n      </web>\n    </application>\n  </applications>\n</domain>",
    "standalone.xml": "<server xmlns=\"urn:jboss:domain:1.7\">\n  <extensions>\n    <extension module=\"org.jboss.as.clustering.infinispan\"/>\n    <extension module=\"org.jboss.as.connector\"/>\n    <extension module=\"org.jboss.as.deployment-scanner\"/>\n    <extension module=\"org.jboss.as.ee\"/>\n    <extension module=\"org.jboss.as.ejb3\"/>\n    <extension module=\"org.jboss.as.jaxrs\"/>\n    <extension module=\"org.jboss.as.jpa\"/>\n    <extension module=\"org.jboss.as.jsf\"/>\n    <extension module=\"org.jboss.as.logging\"/>\n    <extension module=\"org.jboss.as.mail\"/>\n    <extension module=\"org.jboss.as.messaging\"/>\n    <extension module=\"org.jboss.as.naming\"/>\n    <extension module=\"org.jboss.as.remoting\"/>\n    <extension module=\"org.jboss.as.sar\"/>\n    <extension module=\"org.jboss.as.security\"/>\n    <extension module=\"org.jboss.as.transactions\"/>\n    <extension module=\"org.jboss.as.web\"/>\n    <extension module=\"org.jboss.as.weld\"/>\n    <extension module=\"org.jboss.as.jdr\"/>\n  </extensions>\n  <management>\n    <security-realms>\n      <security-realm name=\"ManagementRealm\">\n        <server-identities>\n          <secret value=\"secret\"/>\n        </server-identities>\n      </security-realm>\n    </security-realms>\n  </management>\n</server>",
    "Module1.vb": "Module Module1\n\n    Sub Main()\n        Console.WriteLine(\"Hello, World!\")\n    End Sub\n\nEnd Module",
    "lib/": "// Ruby library files\n",
    "bin/": "// Ruby binary files\n",
    "Gemfile": "source 'https://rubygems.org'\ngem 'rails', '~> 6.1.4'\n",
    "src/": "// PHP source files\n",
    "public/": "// PHP public files\n",
    "composer.json": "{\n  \"name\": \"my-php-project\",\n  \"require\": {}\n}",
    "tests/": "// Python test files\n",
    "requirements.txt": "flask\n",
    "src/main/java/": "// Java source files\n",
    "src/main/resources/": "// Java resource files\n",
    "pom.xml": "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://www.w3.org/2001/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>com.example</groupId>\n  <artifactId>spring-boot-app</artifactId>\n  <version>0.0.1-SNAPSHOT</version>\n  <dependencies>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n  </dependencies>\n</project>",
    "project.json": "{\n  \"version\": \"1.0.0\",\n  \"dependencies\": {}\n}",
    "src/": "// C++ source files\n",
    "include/": "// C++ header files\n",
    "CMakeLists.txt": "cmake_minimum_required(VERSION 3.10)\nproject(MyCppProject)\nset(CMAKE_CXX_STANDARD 17)\nadd_executable(MyCppProject src/main.cpp)\n",
    "src/": "// C source files\n",
    "include/": "// C header files\n",
    "Makefile": "CC=gcc\nCFLAGS=-I.\nDEPS = \nOBJ = main.o \n\n%.o: %.c $(DEPS)\n\t$(CC) -c -o $@ $< $(CFLAGS)\n\nmain: $(OBJ)\n\t$(CC) -o $@ $^ $(CFLAGS)\n",
    "tsconfig.json": "{\n  \"compilerOptions\": {\n    \"target\": \"es6\",\n    \"module\": \"commonjs\",\n    \"outDir\": \"./dist\",\n    \"rootDir\": \"./src\",\n    \"strict\": true\n  }\n}",
    "package.json": "{\n  \"name\": \"my-typescript-project\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"build\": \"tsc\"\n  },\n  \"devDependencies\": {\n    \"typescript\": \"^4.0.0\"\n  }\n}",
    "src/": "// JavaScript source files\n",
    "package.json": "{\n  \"name\": \"my-javascript-project\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"node index.js\"\n  },\n  \"dependencies\": {}\n}",
    "index.html": "<!DOCTYPE html>\n<html>\n<head>\n    <title>My HTML Project</title>\n</head>\n<body>\n    <h1>Hello, World!</h1>\n</body>\n</html>",
    "styles.css": "body {\n    font-family: Arial, sans-serif;\n}",
    "styles.scss": "body {\n    font-family: Arial, sans-serif;\n}",
    "styles.less": "body {\n    font-family: Arial, sans-serif;\n}",
    "styles.styl": "body\n  font-family Arial, sans-serif\n",
    "README.md": "# Project Title\n\nThis is a project generated by the AI Development Assistant.\n",
    "config.yaml": "# YAML configuration\n",
    "config.json": "{\n  \"key\": \"value\"\n}",
    "config.xml": "<config>\n  <key>value</key>\n</config>",
    "config.toml": "key = \"value\"\n",
    "config.ini": "[section]\nkey = value\n",
    "script.sh": "#!/bin/bash\necho \"Hello, World!\"\n",
    "script.ps1": "Write-Host \"Hello, World!\"\n",
    "script.bat": "@echo off\necho Hello, World!\n",
    "Makefile": "all:\n\techo \"Hello, World!\"\n",
    "Dockerfile": "FROM python:3.8-slim\nWORKDIR /app\nCOPY . /app\nRUN pip install -r requirements.txt\nCMD [\"python\", \"app.py\"]",
    "Vagrantfile": "Vagrant.configure(\"2\") do |config|\n  config.vm.box = \"ubuntu/bionic64\"\nend\n",
    "playbook.yml": "---\n- hosts: all\n  tasks:\n    - name: Ensure Apache is installed\n      apt:\n        name: apache2\n        state: present\n",
    "main.tf": "provider \"aws\" {\n  region = \"us-west-2\"\n}\n",
    "deployment.yaml": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-deployment\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: my-app\n  template:\n    metadata:\n      labels:\n        app: my-app\n    spec:\n      containers:\n      - name: my-container\n        image: my-image\n        ports:\n        - containerPort: 80\n",
    "service.yaml": "apiVersion: v1\nkind: Service\nmetadata:\n  name: my-service\nspec:\n  selector:\n    app: my-app\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 80\n",
    "Chart.yaml": "apiVersion: v2\nname: my-chart\nversion: 0.1.0\n",
    "values.yaml": "replicaCount: 1\n",
    "manifests/": "// Puppet manifests\n",
    "modules/": "// Puppet modules\n",
    "recipes/": "// Chef recipes\n",
    "attributes/": "// Chef attributes\n",
    "salt/": "// SaltStack state files\n",
    "pillar/": "// SaltStack pillar files\n",
    "inputs/": "// CFEngine inputs\n",
    "outputs/": "// CFEngine outputs\n",
    "Jenkinsfile": "pipeline {\n    agent any\n    stages {\n        stage('Build') {\n            steps {\n                echo 'Building...'\n            }\n        }\n        stage('Test') {\n            steps {\n                echo 'Testing...'\n            }\n        }\n        stage('Deploy') {\n            steps {\n                echo 'Deploying...'\n            }\n        }\n    }\n}\n",
    ".circleci/config.yml": "version: 2.1\njobs:\n  build:\n    docker:\n      - image: circleci/python:3.8\n    steps:\n      - checkout\n      - run: echo \"Building...\"\n",
    ".travis.yml": "language: python\npython:\n  - \"3.8\"\nscript:\n  - echo \"Building...\"\n",
    ".gitlab-ci.yml": "stages:\n  - build\n  - test\n  - deploy\nbuild:\n  stage: build\n  script:\n    - echo \"Building...\"\ntest:\n  stage: test\n  script:\n    - echo \"Testing...\"\ndeploy:\n  stage: deploy\n  script:\n    - echo \"Deploying...\"\n",
    ".github/workflows/ci.yml": "name: CI\non: [push]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Build\n        run: echo \"Building...\"\n",
    "bitbucket-pipelines.yml": "pipelines:\n  default:\n    - step:\n        name: Build\n        script:\n          - echo \"Building...\"\n",
    "teamcity-settings.xml": "<project>\n  <build>\n    <steps>\n      <step>\n        <name>Build</name>\n        <script>echo \"Building...\"</script>\n      </step>\n    </steps>\n  </build>\n</project>",
    "bamboo-specs/": "// Bamboo specs\n",
    "azure-pipelines.yml": "trigger:\n- main\npool:\n  vmImage: 'ubuntu-latest'\nsteps:\n- script: echo \"Building...\"\n",
    "buildspec.yml": "version: 0.2\nphases:\n  build:\n    commands:\n      - echo \"Building...\"\n",
    "cloudbuild.yaml": "steps:\n- name: 'gcr.io/cloud-builders/docker'\n  args: ['build', '-t', 'gcr.io/$PROJECT_ID/my-image', '.']\n",
    "Procfile": "web: python app.py\n",
    "netlify.toml": "[build]\n  publish = \"public\"\n  command = \"echo 'Building...'\n",
    "vercel.json": "{\n  \"builds\": [\n    { \"src\": \"index.js\", \"use\": \"@vercel/node\" }\n  ]\n}",
    "firebase.json": "{\n  \"hosting\": {\n    \"public\": \"public\",\n    \"ignore\": [\n      \"firebase.json\",\n      \"**/.*\",\n      \"**/node_modules/**\"\n    ]\n  }\n}",
    "amplify.yml": "version: 1\nfrontend:\n  phases:\n    build:\n      commands:\n        - echo \"Building...\"\n",
    "serverless.yml": "service: my-service\nprovider:\n  name: aws\n  runtime: nodejs12.x\nfunctions:\n  hello:\n    handler: handler.hello\n",
    "stack.yml": "version: 1.0\nprovider:\n  name: openfaas\nfunctions:\n  hello:\n    image: functions/alpine:latest\n    handler: ./handler\n",
    "function.yaml": "apiVersion: kubeless.io/v1beta1\nkind: Function\nmetadata:\n  name: hello\nspec:\n  runtime: python3.8\n  handler: handler.hello\n  deps: requirements.txt\n",
    "service.yaml": "apiVersion: serving.knative.dev/v1\nkind: Service\nmetadata:\n  name: hello\nspec:\n  template:\n    spec:\n      containers:\n        - image: gcr.io/knative-samples/helloworld-go\n          env:\n            - name: TARGET\n              value: \"Go Sample v1\"\n",
    "workflow.yaml": "apiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: hello-world-\nspec:\n  entrypoint: whalesay\n  templates:\n    - name: whalesay\n      container:\n        image: docker/whalesay:latest\n        command: [cowsay]\n        args: [\"hello world\"]\n",
    "pipeline.json": "{\n  \"schema\": \"v1\",\n  \"id\": \"my-pipeline\",\n  \"stages\": [\n    {\n      \"id\": \"build\",\n      \"type\": \"jenkins\",\n      \"master\": \"jenkins-master\",\n      \"job\": \"build-job\"\n    }\n  ]\n}",
    "pipeline.yaml": "apiVersion: tekton.dev/v1beta1\nkind: Pipeline\nmetadata:\n  name: hello-world-pipeline\nspec:\n  tasks:\n    - name: hello-world\n      taskRef:\n        name: hello-world-task\n",
    "flux.yaml": "apiVersion: flux.weave.works/v1beta1\nkind: HelmRelease\nmetadata:\n  name: my-release\nspec:\n  releaseName: my-release\n  chart:\n    repository: https://charts.bitnami.com/bitnami\n    name: nginx\n    version: 8.9.1\n",
    "istio.yaml": "apiVersion: install.istio.io/v1alpha1\nkind: IstioOperator\nmetadata:\n  name: example-istiocontrolplane\nspec:\n  profile: demo\n",
    "linkerd.yaml": "apiVersion: linkerd.io/v1alpha1\nkind: Linkerd\nmetadata:\n  name: linkerd\nspec:\n  version: stable-2.10.2\n",
    "consul.hcl": "datacenter = \"dc1\"\ndata_dir = \"/opt/consul\"\nlog_level = \"INFO\"\n",
    "vault.hcl": "storage \"file\" {\n  path = \"/vault/data\"\n}\nlistener \"tcp\" {\n  address = \"127.0.0.1:8200\"\n  tls_disable = 1\n}\n",
    "nomad.hcl": "data_dir = \"/opt/nomad\"\nlog_level = \"INFO\"\n",
    "traefik.toml": "[entryPoints]\n  [entryPoints.http]\n    address = \":80\"\n",
    "nginx.conf": "server {\n    listen 80;\n    server_name example.com;\n    location / {\n        proxy_pass http://localhost:3000;\n    }\n}\n",
    "httpd.conf": "ServerName localhost\nListen 80\nDocumentRoot \"/var/www/html\"\n",
    "haproxy.cfg": "global\n    log /dev/log local0\n    log /dev/log local1 notice\n    chroot /var/lib/haproxy\n    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners\n    stats timeout 30s\n    user haproxy\n    group haproxy\n    daemon\n    ca-base /etc/ssl/certs\n    crt-base /etc/ssl/private\n    ssl-default-bind-ciphers PROFILE=SYSTEM\n    ssl-default-server-ciphers PROFILE=SYSTEM\n\ndefaults\n    log     global\n    mode    http\n    option  httplog\n    option  dontlognull\n    timeout connect 5000ms\n    timeout client  50000ms\n    timeout server  50000ms\n    errorfile 400 /etc/haproxy/errors/400.http\n    errorfile 403 /etc/haproxy/errors/403.http\n    errorfile 408 /etc/haproxy/errors/408.http\n    errorfile 500 /etc/haproxy/errors/500.http\n    errorfile 502 /etc/haproxy/errors/502.http\n    errorfile 503 /etc/haproxy/errors/503.http\n    errorfile 504 /etc/haproxy/errors/504.http\n",
    "default.vcl": "vcl 4.0;\nbackend default {\n    .host = \"127.0.0.1\";\n    .port = \"8080\";\n}\n",
    "squid.conf": "http_port 3128\nacl localnet src 10.0.0.0/8\nhttp_access allow localnet\n",
    "Caddyfile": "localhost\nroot * /usr/share/caddy\nfile_server\n",
    "lighttpd.conf": "server.modules = (\n    \"mod_access\",\n    \"mod_alias\",\n    \"mod_compress\",\n    \"mod_redirect\",\n    \"mod_rewrite\"\n)\nserver.document-root = \"/var/www/html\"\nserver.port = 80\n"
}