{
    "app.py": "# This is a Flask application\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=80)",
    "index.js": "// This is an Express application\nconst express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n    res.send('Hello, World!');\n});\n\napp.listen(3000, () => {\n    console.log('Server is running on port 3000');\n});",
    "package.json": "{\n  \"name\": \"express-app\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"express\": \"^4.17.1\"\n  }\n}",
    "main.py": "# This is a FastAPI application\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get('/')\ndef read_root():\n    return {\"Hello\": \"World\"}",
    "Dockerfile": "FROM python:3.8-slim\nWORKDIR /app\nCOPY . /app\nRUN pip install -r requirements.txt\nCMD [\"python\", \"app.py\"]",
    "README.md": "# Project Title\n\nThis is a project generated by the AI Development Assistant.\n",
    "config.py": "# Configuration file\n\nclass Config:\n    DEBUG = True\n",
    "angular.json": "{\n  \"version\": 1,\n  \"projects\": {}\n}",
    "manage.py": "# This is a Django management script\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'app.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)",
    "settings.py": "# Django settings for app project.\n\nimport os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'app.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'app.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'",
    "index.html": "<!DOCTYPE html>\n<html>\n<head>\n    <title>React App</title>\n</head>\n<body>\n    <div id=\"root\"></div>\n    <script src=\"bundle.js\"></script>\n</body>\n</html>",
    "styles.css": "body {\n    font-family: Arial, sans-serif;\n}",
    "scripts.js": "console.log('Hello, World!');",
    "artisan": "#!/usr/bin/env php\n<?php\n\nuse Illuminate\Contracts\Console\Kernel;\n\nrequire __DIR__.'/vendor/autoload.php';\n\n$app = require_once __DIR__.'/bootstrap/app.php';\n\n$kernel = $app->make(Kernel::class);\n\n$status = $kernel->handle(\n    $app->make('request')\n);\n\n$kernel->terminate($app->make('request'), $status);\n\nexit($status);\n",
    "composer.json": "{\n    \"name\": \"laravel/laravel\",\n    \"type\": \"project\",\n    \"description\": \"The Laravel Framework.\",\n    \"keywords\": [\"framework\", \"laravel\"],\n    \"license\": \"MIT\",\n    \"require\": {\n        \"php\": \"^7.3|^8.0\",\n        \"fideloper/proxy\": \"^4.4\",\n        \"fruitcake/laravel-cors\": \"^2.0\",\n        \"guzzlehttp/guzzle\": \"^7.0.1\",\n        \"laravel/framework\": \"^8.0\",\n        \"laravel/tinker\": \"^2.5\"\n    },\n    \"require-dev\": {\n        \"facade/ignition\": \"^2.5\",\n        \"fakerphp/faker\": \"^1.9.1\",\n        \"mockery/mockery\": \"^1.4.2\",\n        \"nunomaduro/collision\": \"^5.0\",\n        \"phpunit/phpunit\": \"^9.3\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"App\\\\\": \"app/\"\n        },\n        \"classmap\": [\n            \"database/seeders\",\n            \"database/factories\"\n        ]\n    },\n    \"config\": {\n        \"optimize-autoloader\": true,\n        \"preferred-install\": \"dist\",\n        \"sort-packages\": true\n    },\n    \"extra\": {\n        \"laravel\": {\n            \"dont-discover\": []\n        }\n    },\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true\n}",
    "src/main/java/": "// Java source files\n",
    "src/main/resources/": "// Resource files\n",
    "e2e/": "// End-to-end test files\n",
    "Gemfile": "source 'https://rubygems.org'\ngem 'rails', '~> 6.1.4'\n",
    "Controllers/": "// ASP.NET Controllers\n",
    "Views/": "// ASP.NET Views\n",
    "Models/": "// ASP.NET Models\n",
    "appsettings.json": "{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft\": \"Warning\",\n      \"Microsoft.Hosting.Lifetime\": \"Information\"\n    }\n  }\n}",
    "Program.cs": "using System;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace MyAspNetApp\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}",
    "src/": "// Source files\n",
    "public/": "// Public files\n",
    "config/": "// Configuration files\n",
    "var/": "// Variable files\n",
    "vendor/": "// Vendor files\n",
    "application/": "// CodeIgniter application files\n",
    "system/": "// CodeIgniter system files\n",
    "user_guide/": "// CodeIgniter user guide files\n",
    "index.php": "<?php\n\nrequire 'vendor/autoload.php';\n\n$app = require_once __DIR__.'/bootstrap/app.php';\n\n$app->run();\n",
    "pages/": "// Next.js pages\n",
    "styles/": "// Next.js styles\n",
    "nuxt.config.js": "export default {\n  // Nuxt.js configuration\n}\n",
    "resources/": "// Resources\n",
    "routes/": "// Routes\n",
    "storage/": "// Storage\n",
    "client/": "// Meteor client files\n",
    "server/": "// Meteor server files\n",
    "private/": "// Meteor private files\n",
    "tests/": "// Meteor test files\n",
    "mix.exs": "defmodule MyApp.MixProject do\n  use Mix.Project\n\n  def project do\n    [\n      app: :my_app,\n      version: \"0.1.0\",\n      elixir: \"~> 1.10\",\n      start_permanent: Mix.env() == :prod,\n      deps: deps()\n    ]\n  end\n\n  def application do\n    [\n      extra_applications: [:logger]\n    ]\n  end\n\n  defp deps do\n    []\n  end\nend",
    "Cargo.toml": "[package]\nname = \"my_rust_project\"\nversion = \"0.1.0\"\nauthors = [\"Your Name <you@example.com>\"]\nedition = \"2018\"\n\n[dependencies]\n",
    "go.mod": "module my_go_project\n\ngo 1.16\n",
    "lib/": "// Elixir library files\n",
    "config/": "// Elixir configuration files\n",
    "build.gradle.kts": "plugins {\n    kotlin(\"jvm\") version \"1.5.10\"\n}\n\ngroup = \"com.example\"\nversion = \"1.0-SNAPSHOT\"\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    testImplementation(kotlin(\"test\"))\n}",
    "Sources/": "// Swift source files\n",
    "Package.swift": "// swift-tools-version:5.3\nimport PackageDescription\n\nlet package = Package(\n    name: \"MySwiftProject\",\n    dependencies: [\n        // Dependencies declare other packages that this package depends on.\n        // .package(url: /* package url */, from: \"1.0.0\"),\n    ],\n    targets: [\n        // Targets are the basic building blocks of a package. A target can define a module or a test suite.\n        // Targets can depend on other targets in this package, and on products in packages which this package depends on.\n        .target(\n            name: \"MySwiftProject\",\n            dependencies: []),\n        .testTarget(\n            name: \"MySwiftProjectTests\",\n            dependencies: [\"MySwiftProject\"]),\n    ]\n)",
    "R/": "// R source files\n",
    "man/": "// R manual files\n",
    "DESCRIPTION": "Package: my_r_package\nType: Package\nTitle: What the Package Does (One Line, Title Case)\nVersion: 0.1.0\nAuthor: Your Name\nMaintainer: Your Name <you@example.com>\nDescription: More about what it does (maybe more than one line)\nLicense: What license it uses\n",
    "t/": "// Perl test files\n",
    "Makefile.PL": "use ExtUtils::MakeMaker;\n\nWriteMakefile(\n    NAME         => 'MyPerlModule',\n    VERSION_FROM => 'lib/MyPerlModule.pm',\n    PREREQ_PM    => {},\n    ($] >= 5.005 ?    ## Add these new keywords supported since 5.005\n      (ABSTRACT_FROM => 'lib/MyPerlModule.pm', # retrieve abstract from module\n       AUTHOR        => 'Your Name <you@example.com>') : ()),\n);",
    "main.lua": "-- Lua main script\nprint(\"Hello, World!\")\n",
    "app/": "// Haskell application files\n",
    "test/": "// Haskell test files\n",
    "package.yaml": "name: my-haskell-project\nversion: 0.1.0.0\nsynopsis: A short description of the project\ncategory: Web\nbuild-type: Simple\ncabal-version: >=1.10\n\nlibrary\n  exposed-modules:\n      MyHaskellProject\n  hs-source-dirs:\n      src\n  build-depends:\n      base >=4.7 && <5\n  default-language: Haskell2010\n",
    "project.clj": "(defproject my-clojure-project \"0.1.0-SNAPSHOT\"\n  :description \"FIXME: write description\"\n  :url \"http://example.com/FIXME\"\n  :license {:name \"Eclipse Public License\"\n            :url \"http://www.eclipse.org/legal/epl-v10.html\"}\n  :dependencies [[org.clojure/clojure \"1.10.1\"]])",
    "build.sbt": "name := \"my-scala-project\"\n\nversion := \"0.1\"\n\nscalaVersion := \"2.13.5\"\n\nlibraryDependencies += \"org.scalatest\" %% \"scalatest\" % \"3.2.3\" % Test\n",
    "src/main/groovy/": "// Groovy source files\n",
    "paket.dependencies": "source https://nuget.org/api/v2\nframework: net45\nnuget FSharp.Core\n",
    "dune": "(executable\n (name my_ocaml_project)\n (libraries core))\n",
    "dune-project": "(lang dune 2.0)\n(name my_ocaml_project)\n",
    "include/": "// Erlang include files\n",
    "rebar.config": "{erl_opts, [debug_info]}.\n{deps, []}.\n",
    "My Project/": "// VB.NET project files\n",
    "Module1.vb": "Module Module1\n\n    Sub Main()\n        Console.WriteLine(\"Hello, World!\")\n    End Sub\n\nEnd Module",
    "requirements.txt": "flask"
}
